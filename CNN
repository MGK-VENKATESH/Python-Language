import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.regularizers import l2
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.utils.class_weight import compute_class_weight
import numpy as np
import matplotlib.pyplot as plt
import os

# Dataset path
data_dir = '/Users/mgkvenky/Desktop/data'

# Define the CNN model
#def CNN(input_shape, n_class):
#    model = models.Sequential([
#       layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
#        layers.MaxPooling2D((2, 2)),
#       layers.Conv2D(64, (3, 3), activation='relu'),
#        layers.MaxPooling2D((2, 2)),
#        layers.Conv2D(64, (3, 3), activation='relu'),
#        layers.Flatten(),
#        layers.Dense(64, activation='relu'),
#       layers.Dense(n_class, activation='softmax')
#    ])
#    return model          #with this model the accuracy is around 87%


def CNN(input_shape, n_class):
    model = models.Sequential([
        layers.Conv2D(16, (3, 3), activation='relu', input_shape=input_shape, kernel_regularizer=l2(0.01)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(32, (3, 3), activation='relu', kernel_regularizer=l2(0.01)),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dropout(0.3),
        layers.Dense(32, activation='relu', kernel_regularizer=l2(0.01)),
        layers.Dropout(0.3),
        layers.Dense(n_class, activation='softmax')    # with accuracy aound 57%
    ])
    return model

# Load and preprocess the data
img_size = (64, 64)  # Adjust this based on your image size
batch_size = 32

# Add data augmentation
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

# Split the data into train, validation, and test sets
train_generator = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training',
    color_mode='grayscale',
    seed=42
)

validation_generator = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation',
    color_mode='grayscale',
    seed=42
)

# Create a separate test set
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    color_mode='grayscale',
    shuffle=False
)

# Calculate class weights
class_weights = compute_class_weight('balanced', classes=np.unique(train_generator.classes), y=train_generator.classes)
class_weight_dict = dict(enumerate(class_weights))

# Build the model
input_shape = (64, 64, 1)  # Adjust this based on your image size
n_class = 4  # Number of classes (cloudy, desert, green_area, water)

model = CNN(input_shape, n_class)

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Initialize lists to store accuracies
train_accuracies = []
val_accuracies = []
test_accuracies = []

# Training loop
epochs = 50
for epoch in range(epochs):
    print(f"Epoch {epoch+1}/{epochs}")
    history = model.fit(
        train_generator,
        steps_per_epoch=train_generator.samples // batch_size,
        validation_data=validation_generator,
        validation_steps=validation_generator.samples // batch_size,
        epochs=1,
        class_weight=class_weight_dict
    )
    
    # Store training and validation accuracies
    train_accuracies.append(history.history['accuracy'][0])
    val_accuracies.append(history.history['val_accuracy'][0])
    
    # Evaluate on test set after each epoch
    _, test_accuracy = model.evaluate(test_generator)
    test_accuracies.append(test_accuracy)
    
    print(f"Train Accuracy: {train_accuracies[-1]:.4f}")
    print(f"Validation Accuracy: {val_accuracies[-1]:.4f}")
    print(f"Test Accuracy: {test_accuracies[-1]:.4f}")

# Plot the accuracies
plt.figure(figsize=(10, 6))
plt.plot(range(1, epochs+1), train_accuracies, label='Training Accuracy')
plt.plot(range(1, epochs+1), val_accuracies, label='Validation Accuracy')
plt.plot(range(1, epochs+1), test_accuracies, label='Test Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.savefig('accuracy_plot.png')
plt.close()

# Final evaluation on test set
final_test_loss, final_test_accuracy = model.evaluate(test_generator)
print(f"Final Test Accuracy: {final_test_accuracy:.4f}")

# Get predictions for the test set
y_pred = model.predict(test_generator)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = test_generator.classes[:len(y_pred_classes)]

# Print classification report and confusion matrix for the test set
print("\nTest Set Results:")
print(classification_report(y_true, y_pred_classes, target_names=list(test_generator.class_indices.keys())))
print(confusion_matrix(y_true, y_pred_classes))



Output:

Found 4505 images belonging to 4 classes.
Found 1126 images belonging to 4 classes.
Found 5631 images belonging to 4 classes.
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`
/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.                              super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/50
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` 
class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.                                                                                                                                        self._warn_if_super_not_called()
140/140 ━━━━━━━━━━━━━━━━━━━━ 6s 34ms/step - accuracy: 0.3831 - loss: 1.4948 - val_accuracy: 0.5357 - val_loss: 0.9032
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.3806 - loss: 1.0131 
Train Accuracy: 0.4599
Validation Accuracy: 0.5357
Test Accuracy: 0.5409
Epoch 2/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5315 - loss: 0.8721 - val_accuracy: 0.4812 - val_loss: 0.8727
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.3673 - loss: 0.8861 
Train Accuracy: 0.5256
Validation Accuracy: 0.4812
Test Accuracy: 0.4958
Epoch 3/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 27ms/step - accuracy: 0.5349 - loss: 0.8315 - val_accuracy: 0.5330 - val_loss: 0.8029
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3971 - loss: 0.8326 
Train Accuracy: 0.5518
Validation Accuracy: 0.5330
Test Accuracy: 0.5395
Epoch 4/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5524 - loss: 0.7986 - val_accuracy: 0.5250 - val_loss: 0.7860
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4250 - loss: 0.8429 
Train Accuracy: 0.5547
Validation Accuracy: 0.5250
Test Accuracy: 0.5535
Epoch 5/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5484 - loss: 0.8000 - val_accuracy: 0.5759 - val_loss: 0.7772
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.7359 - loss: 0.7328 
Train Accuracy: 0.5551
Validation Accuracy: 0.5759
Test Accuracy: 0.5779
Epoch 6/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5587 - loss: 0.7768 - val_accuracy: 0.4938 - val_loss: 0.7871
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4561 - loss: 0.7826 
Train Accuracy: 0.5488
Validation Accuracy: 0.4938
Test Accuracy: 0.5397
Epoch 7/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5388 - loss: 0.7899 - val_accuracy: 0.5268 - val_loss: 0.7717
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4235 - loss: 0.8262 
Train Accuracy: 0.5524
Validation Accuracy: 0.5268
Test Accuracy: 0.5544
Epoch 8/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5266 - loss: 0.7694 - val_accuracy: 0.5759 - val_loss: 0.7572
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.7318 - loss: 0.7357 
Train Accuracy: 0.5410
Validation Accuracy: 0.5759
Test Accuracy: 0.5773
Epoch 9/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5741 - loss: 0.7606 - val_accuracy: 0.5902 - val_loss: 0.7629
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 9ms/step - accuracy: 0.5983 - loss: 0.7687 
Train Accuracy: 0.5491
Validation Accuracy: 0.5902
Test Accuracy: 0.6027
Epoch 10/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5438 - loss: 0.7658 - val_accuracy: 0.6089 - val_loss: 0.7570
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 9ms/step - accuracy: 0.7088 - loss: 0.7755 
Train Accuracy: 0.5567
Validation Accuracy: 0.6089
Test Accuracy: 0.5981
Epoch 11/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5363 - loss: 0.7754 - val_accuracy: 0.5616 - val_loss: 0.7593
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.5316 - loss: 0.7915 
Train Accuracy: 0.5502
Validation Accuracy: 0.5616
Test Accuracy: 0.5804
Epoch 12/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 27ms/step - accuracy: 0.5577 - loss: 0.7556 - val_accuracy: 0.5027 - val_loss: 0.7618
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3943 - loss: 0.8026 
Train Accuracy: 0.5589
Validation Accuracy: 0.5027
Test Accuracy: 0.5356
Epoch 13/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5458 - loss: 0.7629 - val_accuracy: 0.5232 - val_loss: 0.7528
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.5571 - loss: 0.7860 
Train Accuracy: 0.5500
Validation Accuracy: 0.5232
Test Accuracy: 0.5388
Epoch 14/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5550 - loss: 0.7592 - val_accuracy: 0.4643 - val_loss: 0.7648
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3192 - loss: 0.8116 
Train Accuracy: 0.5488
Validation Accuracy: 0.4643
Test Accuracy: 0.4813
Epoch 15/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5525 - loss: 0.7534 - val_accuracy: 0.5241 - val_loss: 0.7555
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4440 - loss: 0.7956 
Train Accuracy: 0.5585
Validation Accuracy: 0.5241
Test Accuracy: 0.5487
Epoch 16/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5693 - loss: 0.7555 - val_accuracy: 0.5205 - val_loss: 0.7579
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4680 - loss: 0.7742 
Train Accuracy: 0.5603
Validation Accuracy: 0.5205
Test Accuracy: 0.5464
Epoch 17/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 28ms/step - accuracy: 0.5566 - loss: 0.7625 - val_accuracy: 0.5670 - val_loss: 0.7425
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.6457 - loss: 0.7661 
Train Accuracy: 0.5471
Validation Accuracy: 0.5670
Test Accuracy: 0.5702
Epoch 18/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5619 - loss: 0.7474 - val_accuracy: 0.5348 - val_loss: 0.7671
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3885 - loss: 0.8526 
Train Accuracy: 0.5571
Validation Accuracy: 0.5348
Test Accuracy: 0.5408
Epoch 19/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 28ms/step - accuracy: 0.5454 - loss: 0.7550 - val_accuracy: 0.5125 - val_loss: 0.7558
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.4565 - loss: 0.7821 
Train Accuracy: 0.5509
Validation Accuracy: 0.5125
Test Accuracy: 0.5486
Epoch 20/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5588 - loss: 0.7494 - val_accuracy: 0.5366 - val_loss: 0.7481
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 8ms/step - accuracy: 0.4235 - loss: 0.7706 
Train Accuracy: 0.5531
Validation Accuracy: 0.5366
Test Accuracy: 0.5509
Epoch 21/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 27ms/step - accuracy: 0.5583 - loss: 0.7424 - val_accuracy: 0.5661 - val_loss: 0.7398
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.6506 - loss: 0.7564 
Train Accuracy: 0.5618
Validation Accuracy: 0.5661
Test Accuracy: 0.5676
Epoch 22/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5559 - loss: 0.7467 - val_accuracy: 0.5286 - val_loss: 0.7525
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.4546 - loss: 0.7597 
Train Accuracy: 0.5522
Validation Accuracy: 0.5286
Test Accuracy: 0.5596
Epoch 23/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5367 - loss: 0.7685 - val_accuracy: 0.5188 - val_loss: 0.7724
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.3774 - loss: 0.8150 
Train Accuracy: 0.5446
Validation Accuracy: 0.5188
Test Accuracy: 0.5283
Epoch 24/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5371 - loss: 0.7550 - val_accuracy: 0.5286 - val_loss: 0.7559
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3731 - loss: 0.7919 
Train Accuracy: 0.5486
Validation Accuracy: 0.5286
Test Accuracy: 0.5329
Epoch 25/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5434 - loss: 0.7624 - val_accuracy: 0.5268 - val_loss: 0.7465
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4302 - loss: 0.7762 
Train Accuracy: 0.5547
Validation Accuracy: 0.5268
Test Accuracy: 0.5550
Epoch 26/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5428 - loss: 0.7404 - val_accuracy: 0.5643 - val_loss: 0.7473
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.7324 - loss: 0.7128 
Train Accuracy: 0.5488
Validation Accuracy: 0.5643
Test Accuracy: 0.5720
Epoch 27/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5566 - loss: 0.7506 - val_accuracy: 0.5429 - val_loss: 0.7452
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.4071 - loss: 0.8016 
Train Accuracy: 0.5564
Validation Accuracy: 0.5429
Test Accuracy: 0.5523
Epoch 28/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5597 - loss: 0.7419 - val_accuracy: 0.5491 - val_loss: 0.7438
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.4154 - loss: 0.8086 
Train Accuracy: 0.5654
Validation Accuracy: 0.5491
Test Accuracy: 0.5569
Epoch 29/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5618 - loss: 0.7361 - val_accuracy: 0.5813 - val_loss: 0.7648
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - accuracy: 0.7318 - loss: 0.7113 
Train Accuracy: 0.5594
Validation Accuracy: 0.5813
Test Accuracy: 0.5839
Epoch 30/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5419 - loss: 0.7556 - val_accuracy: 0.5661 - val_loss: 0.7569
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.7359 - loss: 0.7021 
Train Accuracy: 0.5562
Validation Accuracy: 0.5661
Test Accuracy: 0.5717
Epoch 31/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 27ms/step - accuracy: 0.5423 - loss: 0.7548 - val_accuracy: 0.5143 - val_loss: 0.7411
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 9ms/step - accuracy: 0.6005 - loss: 0.7614 
Train Accuracy: 0.5473
Validation Accuracy: 0.5143
Test Accuracy: 0.5413
Epoch 32/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 5s 36ms/step - accuracy: 0.5586 - loss: 0.7319 - val_accuracy: 0.5348 - val_loss: 0.7500
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 11ms/step - accuracy: 0.3719 - loss: 0.8087
Train Accuracy: 0.5573
Validation Accuracy: 0.5348
Test Accuracy: 0.5374
Epoch 33/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 5s 33ms/step - accuracy: 0.5692 - loss: 0.7381 - val_accuracy: 0.5750 - val_loss: 0.7408
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.5075 - loss: 0.7803 
Train Accuracy: 0.5656
Validation Accuracy: 0.5750
Test Accuracy: 0.5960
Epoch 34/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 25ms/step - accuracy: 0.5605 - loss: 0.7421 - val_accuracy: 0.5571 - val_loss: 0.7451
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4452 - loss: 0.7915 
Train Accuracy: 0.5643
Validation Accuracy: 0.5571
Test Accuracy: 0.5729
Epoch 35/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 31ms/step - accuracy: 0.5620 - loss: 0.7392 - val_accuracy: 0.5607 - val_loss: 0.7354
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 9ms/step - accuracy: 0.4398 - loss: 0.7815 
Train Accuracy: 0.5556
Validation Accuracy: 0.5607
Test Accuracy: 0.5667
Epoch 36/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5546 - loss: 0.7368 - val_accuracy: 0.5857 - val_loss: 0.7319
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.7338 - loss: 0.7313 
Train Accuracy: 0.5576
Validation Accuracy: 0.5857
Test Accuracy: 0.5800
Epoch 37/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5572 - loss: 0.7413 - val_accuracy: 0.5652 - val_loss: 0.7542
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.5595 - loss: 0.7672 
Train Accuracy: 0.5495
Validation Accuracy: 0.5652
Test Accuracy: 0.5995
Epoch 38/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5631 - loss: 0.7333 - val_accuracy: 0.5375 - val_loss: 0.7420
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.4862 - loss: 0.7575 
Train Accuracy: 0.5605
Validation Accuracy: 0.5375
Test Accuracy: 0.5729
Epoch 39/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5560 - loss: 0.7394 - val_accuracy: 0.5295 - val_loss: 0.7604
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3890 - loss: 0.8475 
Train Accuracy: 0.5585
Validation Accuracy: 0.5295
Test Accuracy: 0.5445
Epoch 40/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5533 - loss: 0.7440 - val_accuracy: 0.5804 - val_loss: 0.7364
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.5668 - loss: 0.7703 
Train Accuracy: 0.5526
Validation Accuracy: 0.5804
Test Accuracy: 0.6152
Epoch 41/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 27ms/step - accuracy: 0.5541 - loss: 0.7483 - val_accuracy: 0.5348 - val_loss: 0.7426
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.3860 - loss: 0.8093 
Train Accuracy: 0.5573
Validation Accuracy: 0.5348
Test Accuracy: 0.5409
Epoch 42/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5654 - loss: 0.7411 - val_accuracy: 0.5429 - val_loss: 0.7417
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.4101 - loss: 0.7826 
Train Accuracy: 0.5649
Validation Accuracy: 0.5429
Test Accuracy: 0.5516
Epoch 43/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 28ms/step - accuracy: 0.5588 - loss: 0.7377 - val_accuracy: 0.5652 - val_loss: 0.7356
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.5170 - loss: 0.7551 
Train Accuracy: 0.5556
Validation Accuracy: 0.5652
Test Accuracy: 0.5898
Epoch 44/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 28ms/step - accuracy: 0.5581 - loss: 0.7379 - val_accuracy: 0.5616 - val_loss: 0.7541
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.7247 - loss: 0.6966 
Train Accuracy: 0.5533
Validation Accuracy: 0.5616
Test Accuracy: 0.5717
Epoch 45/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 28ms/step - accuracy: 0.5501 - loss: 0.7478 - val_accuracy: 0.5491 - val_loss: 0.7398
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.4771 - loss: 0.7775 
Train Accuracy: 0.5500
Validation Accuracy: 0.5491
Test Accuracy: 0.5782
Epoch 46/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5705 - loss: 0.7417 - val_accuracy: 0.5259 - val_loss: 0.7412
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.3613 - loss: 0.8224     
Train Accuracy: 0.5598
Validation Accuracy: 0.5259
Test Accuracy: 0.5374
Epoch 47/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 24ms/step - accuracy: 0.5514 - loss: 0.7342 - val_accuracy: 0.5357 - val_loss: 0.7509
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.4267 - loss: 0.7997 
Train Accuracy: 0.5616
Validation Accuracy: 0.5357
Test Accuracy: 0.5567
Epoch 48/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 30ms/step - accuracy: 0.5582 - loss: 0.7308 - val_accuracy: 0.5420 - val_loss: 0.7380
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - accuracy: 0.4175 - loss: 0.7834 
Train Accuracy: 0.5535
Validation Accuracy: 0.5420
Test Accuracy: 0.5546
Epoch 49/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 26ms/step - accuracy: 0.5618 - loss: 0.7445 - val_accuracy: 0.5286 - val_loss: 0.7311
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.6193 - loss: 0.7416 
Train Accuracy: 0.5569
Validation Accuracy: 0.5286
Test Accuracy: 0.5477
Epoch 50/50
140/140 ━━━━━━━━━━━━━━━━━━━━ 4s 29ms/step - accuracy: 0.5649 - loss: 0.7323 - val_accuracy: 0.5312 - val_loss: 0.7503
176/176 ━━━━━━━━━━━━━━━━━━━━ 1s 7ms/step - accuracy: 0.3821 - loss: 0.7954 
Train Accuracy: 0.5549
Validation Accuracy: 0.5312
Test Accuracy: 0.5393
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 9ms/step - accuracy: 0.3821 - loss: 0.7954  
Final Test Accuracy: 0.5393
176/176 ━━━━━━━━━━━━━━━━━━━━ 2s 8ms/step  

Test Set Results:
              precision    recall  f1-score   support

      cloudy       0.57      0.06      0.11      1500
      desert       0.45      0.99      0.62      1131
  green_area       0.58      0.93      0.71      1500
       water       0.73      0.29      0.41      1500

    accuracy                           0.54      5631
   macro avg       0.58      0.57      0.46      5631
weighted avg       0.59      0.54      0.45      5631

[[  91 1344   10   55]
 [  11 1119    0    1]
 [   0    0 1393  107]
 [  57   13  996  434]]
